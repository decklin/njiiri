#!/usr/bin/env ruby

require 'rubygems'
require 'librmpd'
require 'thread'
require 'libglade2'
require 'cgi'

class WidgetBucket
  def initialize(glade)
    @glade = glade
  end
  def method_missing(m, *a)
    @glade.get_widget(m.to_s)
  end
end

class Njiiri

  TITLE = "Njiiri MPD Client"
  NAME = "Njiiri"
  VERSION = "0.1"

  TITLE_FORMAT = "<big><big><b>%s</b></big></big>"
  ARTIST_FORMAT = "<big>%s</big>"
  ALBUM_FORMAT = "<small>%s</small>"
  POSITION_FORMAT = "%d:%02d / %d:%02d"
  WINDOW_FORMAT = "%s - %s"

  # This is here to fill in GTK labels so that they don't shrink from a lack
  # of text, which is visually annoying.

  BLANK = ' '

  # CLASS

  def initialize(path, root = nil, domain = nil, localedir = nil,
                 flag = GladeXML::FILE)
    @glade = GladeXML.new(path) { |handler| method(handler) }
    @widgets = WidgetBucket.new(@glade)
  end

  def connect(host, port, pass)
    @widgets.host_entry.text = host
    @widgets.port_entry.text = port.to_s
    @widgets.pass_entry.text = pass

    @mpd = MPD.new host, port
    @mpd.register_callback(self.method('song_cb'), MPD::CURRENT_SONG_CALLBACK)
    @mpd.register_callback(self.method('time_cb'), MPD::TIME_CALLBACK)

    begin
      @mpd.connect true
      @mpd.password pass if pass
      self.enable_toolbuttons(true)
      @widgets.connect_btn.stock_id = Gtk::Stock::DISCONNECT
      self.connected
    rescue
      self.enable_toolbuttons(false)
    end
  end

  def enable_toolbuttons(sensitive)
    %w{play_btn prev_btn next_btn open_btn saveas_btn clear_btn repeat_btn shuffle_btn}.each do |b|
      @glade.get_widget(b).sensitive = sensitive
    end
  end

  def connected
    if @mpd.playing?
      @widgets.play_btn.stock_id = Gtk::Stock::MEDIA_PAUSE
    end

    @widgets.repeat_btn.active = @mpd.repeat?
    @widgets.shuffle_btn.active = @mpd.random?

    @old_volume = @mpd.volume
    @widgets.volume_scale.value = @mpd.volume.to_f

    @status_msg = nil
    @status_ctx = @widgets.player_status.get_context_id(TITLE)
    self.update_status
  end

  # MAIN WINDOW

  def on_quit(widget, event)
    @mpd.disconnect
    Gtk.main_quit
  end

  def on_info_box_size_allocate(widget, a)
    if @widgets.cover_img.width_request == a.height
      @widgets.cover_img.height_request = 1
    else
      @widgets.cover_img.width_request = a.height
      @widgets.cover_img.height_request = a.height
    end
  end

  # TOOLBAR

  def on_play_btn_clicked(widget)
    if @mpd.playing?
      @mpd.pause = true
      widget.stock_id = Gtk::Stock::MEDIA_PLAY
    else
      @mpd.pause = false
      widget.stock_id = Gtk::Stock::MEDIA_PAUSE
    end
  end

  def on_prev_btn_clicked
    @mpd.previous
  end

  def on_next_btn_clicked
    @mpd.next
  end

  def on_open_btn_clicked
    @widgets.browser_win.show
  end

  def on_saveas_btn_clicked
    @widgets.saveas_dlg.show
  end

  def on_clear_btn_clicked
    @mpd.clear
  end

  def on_repeat_btn_toggled(widget)
    @mpd.repeat = widget.active?
  end

  def on_shuffle_btn_toggled(widget)
    @mpd.random = widget.active?
  end

  def on_connect_btn_clicked(widget)
    if @mpd.connected?
      self.enable_toolbuttons(false)
      widget.stock_id = Gtk::Stock::CONNECT
      @mpd.disconnect
      self.update_info(nil)
      self.update_pos(0, 0)
      self.update_status
    else
      @widgets.connect_dlg.show
    end
  end

  def on_volume_scale_value_changed(widget)
    if widget.value.to_i != @old_volume
      @old_volume = @mpd.volume = widget.value.to_i
      self.update_status
    end
  end

  # BROWSER WINDOW

  def on_close_btn_clicked(widget)
    @widgets.browser_win.hide
  end

  # SAVE AS DIALOG

  def on_cancel_btn_clicked
    @widgets.saveas_dlg.hide
  end

  def on_save_btn_clicked
    @mpd.save(@widgets.name_entry.text)
    @widgets.saveas_dlg.hide
  end

  # CONNECT DIALOG

  def on_conn_cancel_btn_clicked
    @widgets.connect_dlg.hide
  end

  def on_do_connect_btn_clicked
    @widgets.connect_dlg.hide
    host = @widgets.host_entry.text
    port = @widgets.port_entry.text.to_i
    pass = @widgets.pass_entry.text
    self.connect(host, port, pass)
  end

  # CALLBACKS

  def song_cb(current)
    update_info(current)
  end

  def time_cb(elapsed, total)
    update_pos(elapsed, total)
  end

  # MISC

  def update_pos(elapsed, total)
    pos_bar = @widgets.pos_bar
    if total > 0:
      pos_bar.fraction = elapsed.to_f / total
      pos_bar.text = POSITION_FORMAT % \
        [elapsed / 60, elapsed % 60, total / 60, total % 60]
    else
      pos_bar.fraction = 0.0
      pos_bar.text = BLANK
    end
  end

  def update_info(current)
    if @mpd.connected? and current
      @widgets.player_win.title = WINDOW_FORMAT % [current.artist, current.title]
      @widgets.title_label.label = TITLE_FORMAT % CGI::escapeHTML(current.title)
      @widgets.artist_label.label = ARTIST_FORMAT % CGI::escapeHTML(current.artist)
      @widgets.album_label.label = ALBUM_FORMAT % CGI::escapeHTML(current.album)
      if @mpd.playing?
        elapsed, total = @mpd.status["time"].split(":").collect {|t| t.to_i }
        self.update_pos(elapsed, total)
      else
        self.update_pos(0, 0)
      end
    else
      @widgets.player_win.title = NAME
      @widgets.title_label.label = TITLE_FORMAT % BLANK
      @widgets.artist_label.label = ARTIST_FORMAT % BLANK
      @widgets.album_label.label = ALBUM_FORMAT % BLANK
    end
  end

  def update_status
    if @mpd.connected?
        if @status_msg
          @widgets.player_status.remove(@status_ctx, @status_msg)
        end
        text = "Volume: #{@mpd.volume}%"
        @status_msg = @widgets.player_status.push(@status_ctx, text)
    else
      @status_msg = @widgets.player_status.push(@status_ctx, "Disconnected")
    end
  end

end

config = {
  'host' => 'localhost',
  'password' => nil,
  'port' => 6600
  }

File.open(File.expand_path("~/.njiirirc")) do |y|
  YAML.load_documents(y) do |doc|
    config = doc
  end
end

Gtk.init

njiiri = Njiiri.new(File.dirname($0)+"/njiiri.glade", nil, Njiiri::NAME)
njiiri.connect config['host'], config['port'], config['password']

Gtk.main
