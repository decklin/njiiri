#!/usr/bin/ruby

require 'rubygems'
require 'librmpd'
require 'thread'
require 'libglade2'
require 'cgi'

def a(*l)
  l.find {|x| not (x.nil? or x.empty?) }
end

class MPD
  def lsinfo(path = "/", type = :files)
    response = send_command "lsinfo \"#{path}\""
    case type
      when :files
        filter_response response, /\Afile: /i
      when :directories
        filter_response response, /\Adirectory: /i
      when :playlists
        filter_response response, /\Aplaylist: /i
    end
  end
  def listallinfo(path=nil)
    songs(path)
  end
  class Song
    def id; self['id']; end
  end
end

class Njiiri

  TITLE = "Njiiri MPD Client"
  NAME = "Njiiri"
  VERSION = "0.1"
  GLADE_PATH = "njiiri.glade"

  PLAYER_COLS = [ [ String, 0, 200, "Title", ],
                  [ String, 1, 160, "Artist", ],
                  [ String, 2, 160, "Album", ],
                  [ String, 3, 40, "Time", ],
                  [ String, 4, nil, :id, ],
                  [ Integer, 5, nil, :is_cur, ] ]
  BOOKMK_COLS = [ [ String, 0, 0, "Places", ],
                  [ Proc, 1, nil, :cb, ] ]
  BROWSE_COLS = [ [ String, 0, 160, "Title", ],
                  [ String, 1, 120, "Artist", ],
                  [ String, 2, 120, "Album", ],
                  [ String, 3, 40, "Time", ],
                  [ Proc, 4, nil, :cb, ] ]

  # CLASS

  def initialize(rc_path)
    @conf = Conf.new(rc_path)
    @glade = GladeXML.new(GLADE_PATH) {|handler| method(handler) }

    @status_ctx = @glade['player_status'].get_context_id(NAME)
    @status_msg = nil
    @volume = nil

    rend = Gtk::CellRendererText.new
    rend.ellipsize = Pango::ELLIPSIZE_END

    @player_tree_store = Gtk::TreeStore.new(*PLAYER_COLS.collect{|k,| k })
    @glade['playlist_tree'].model = @player_tree_store

    PLAYER_COLS.each do |klass, n, width, name|
      if width
        col = Gtk::TreeViewColumn.new(name, rend, :text => n, :weight => 5)
        col.sizing = Gtk::TreeViewColumn::FIXED
        col.fixed_width = width
        col.resizable = true
        @glade['playlist_tree'].append_column(col)
      end
    end

    @bookmarks_tree_store = Gtk::TreeStore.new(*BOOKMK_COLS.collect{|k,| k })
    @glade['bookmarks_tree'].model = @bookmarks_tree_store

    BOOKMK_COLS.each do |klass, n, width, name|
      if width
        col = Gtk::TreeViewColumn.new(name, rend, :text => n)
        col.resizable = false
        @glade['bookmarks_tree'].append_column(col)
      end
    end

    @files_tree_store = Gtk::TreeStore.new(*BROWSE_COLS.collect{|k,| k })
    @glade['files_tree'].model = @files_tree_store

    BROWSE_COLS.each do |klass, n, width, name|
      if width
        col = Gtk::TreeViewColumn.new(name, rend, :text => n)
        col.sizing = Gtk::TreeViewColumn::FIXED
        col.fixed_width = width
        col.resizable = true
        @glade['files_tree'].append_column(col)
      end
    end

    @glade['host_entry'].text = @conf.serv[:host]
    @glade['port_entry'].text = @conf.serv[:port].to_s
    @glade['pass_entry'].text = @conf.serv[:pass].to_s

    x, y, h, w = [:x, :y, :h, :w].collect {|d| @conf.geom[:player][d] }
    @glade['player_win'].set_default_size(w, h)
    @glade['player_win'].move(x, y)
    @glade['main_pane'].set_position(@conf.geom[:player][:pane])

    x, y, h, w = [:x, :y, :h, :w].collect {|d| @conf.geom[:browser][d] }
    @glade['browser_win'].set_default_size(w, h)
    @glade['browser_win'].move(x, y)
    @glade['files_pane'].set_position(@conf.geom[:browser][:pane])
    setup_browser_bookmarks

    @glade['player_win'].show
  end

  def connect
    @mpd = MPD.new(@conf.serv[:host], @conf.serv[:port])
    @mpd.register_callback(self.method(:playlist_cb), MPD::PLAYLIST_CALLBACK)
    @mpd.register_callback(self.method(:song_cb), MPD::CURRENT_SONG_CALLBACK)
    @mpd.register_callback(self.method(:state_cb), MPD::STATE_CALLBACK)
    @mpd.register_callback(self.method(:time_cb), MPD::TIME_CALLBACK)
    @mpd.register_callback(self.method(:volume_cb), MPD::VOLUME_CALLBACK)
    @mpd.register_callback(self.method(:conn_cb), MPD::CONNECTION_CALLBACK)

    begin
      @mpd.connect(true)
      @mpd.password(@conf.serv[:pass]) if @conf.serv[:pass]
      @glade['connect_btn'].stock_id = Gtk::Stock::DISCONNECT
    rescue
      self.disconnected
    end
  end

  def connected
    self.enable_toolbuttons(true)
    @glade['connect_btn'].stock_id = Gtk::Stock::DISCONNECT
    @glade['play_btn'].stock_id = Gtk::Stock::MEDIA_PAUSE if @mpd.playing?
    @glade['repeat_btn'].active = @mpd.repeat?
    @glade['shuffle_btn'].active = @mpd.random?
    @glade['volume_scale'].value = @volume = @mpd.volume

    self.update_info(@mpd.current_song)
    self.update_status
  end

  def disconnected
    self.enable_toolbuttons(false)
    @glade['connect_btn'].stock_id = Gtk::Stock::CONNECT

    self.update_info(nil)
    self.update_pos(-1)
    self.update_status

    @player_tree_store.clear
  end

  def enable_toolbuttons(sensitive)
    %w{play prev next open saveas clear repeat shuffle}.each do |b|
      @glade["#{b}_btn"].sensitive = sensitive
    end
  end

  # MAIN WINDOW

  def on_player_win_delete(widget, e)
    @mpd.disconnect
    @conf.save
    Gtk.main_quit
  end

  def on_info_box_size_allocate(widget, a)
    if @glade['cover_img'].width_request == a.height
      @glade['cover_img'].height_request = 1
    else
      @glade['cover_img'].width_request = a.height
      @glade['cover_img'].height_request = a.height
    end
  end

  def on_player_win_size_allocate(widget, a)
    @conf.geom[:player][:w] = a.width
    @conf.geom[:player][:h] = a.height
    false
  end

  def on_player_win_configure_event(widget, e)
    @conf.geom[:player][:x] = e.x
    @conf.geom[:player][:y] = e.y
    false
  end

  def on_browser_win_size_allocate(widget, a)
    @conf.geom[:browser][:w] = a.width
    @conf.geom[:browser][:h] = a.height
    false
  end

  def on_browser_win_configure_event(widget, e)
    @conf.geom[:browser][:x] = e.x
    @conf.geom[:browser][:y] = e.y
    false
  end

  def on_pos_bar_button_press_event(widget, e)
    if @mpd.connected? and @mpd.playing?
      seek = (e.x / widget.allocation.width) * @mpd.current_song.time.to_i
      @mpd.seek(@mpd.current_song.pos, seek.to_i)
    end
  end

  def on_playlist_tree_row_activated(widget, path, col)
    iter = @player_tree_store.get_iter(path)
    @mpd.seekid(iter[4], 0)
  end

  # TOOLBAR

  def on_play_btn_clicked(widget)
    if @mpd.stopped?
      @mpd.play
      widget.stock_id = Gtk::Stock::MEDIA_PAUSE
    elsif @mpd.paused?
      @mpd.pause = false
      widget.stock_id = Gtk::Stock::MEDIA_PAUSE
    else
      @mpd.pause = true
      widget.stock_id = Gtk::Stock::MEDIA_PLAY
    end
  end

  def on_prev_btn_clicked
    @mpd.previous
  end

  def on_next_btn_clicked
    @mpd.next
  end

  def on_open_btn_clicked
    @glade['browser_win'].show
  end

  def on_saveas_btn_clicked
    @glade['saveas_dlg'].show
  end

  def on_clear_btn_clicked
    @mpd.clear
  end

  def on_repeat_btn_toggled(widget)
    @mpd.repeat = widget.active?
  end

  def on_shuffle_btn_toggled(widget)
    @mpd.random = widget.active?
  end

  def on_connect_btn_clicked(widget)
    if @mpd.connected?
      @mpd.disconnect
      self.disconnected
    else
      @glade['connect_dlg'].show
    end
  end

  def on_volume_scale_value_changed(widget)
    if widget.value.to_i != @volume
      @mpd.volume = @volume = widget.value.to_i
    end
  end

  # BROWSER WINDOW

  def setup_browser_bookmarks
    bookmarks = { "Library" => proc { @pwd = []; load_pwd },
                  "Search" => proc { activate_search_entry("_Search:") } }
    bookmarks.each do |n, p|
      iter = @bookmarks_tree_store.append(nil)
      iter[0] = n
      iter[1] = p
    end
  end

  def load_pwd
    @files_tree_store.clear
    pwd = @pwd.join("/")
    @mpd.lsinfo(pwd, :directories).each do |path|
      dir = File.basename(path)
      iter = @files_tree_store.append(nil)
      iter[0], iter[1], iter[2], iter[3] = dir, "-", "-", "-"
      iter[4] = proc { @pwd << dir; load_pwd }
    end
    @mpd.lsinfo(pwd, :files).each do |path|
      song = @mpd.listallinfo(path)[0]
      iter = @files_tree_store.append(nil)
      iter[0], iter[1], iter[2], iter[3] = Format.all(song, "-")
      iter[4] = proc { @mpd.add path }
    end
  end

  def on_bookmarks_tree_row_activated(widget, path, col)
    iter = @bookmarks_tree_store.get_iter(path)
    iter[1].call
  end

  def on_files_tree_row_activated(widget, path, col)
    iter = @files_tree_store.get_iter(path)
    iter[4].call
  end

  def on_browser_win_key_press_event(widget, e)
    if !@glade['search_entry'].has_focus? and e.keyval == "/"[0]
      @glade['loc_btn'].active = true
      @glade['search_entry'].text = "http://"
      @glade['search_entry'].grab_focus
      @glade['search_entry'].position = -1
      true
    else
      false
    end
  end

  def on_add_btn_clicked(widget)
    if @glade['search_entry'].has_focus?
      begin
        @mpd.add(@glade['search_entry'].text)
        @glade['search_entry'].text = ""
      rescue RuntimeError
      end
    end
  end

  def on_loc_btn_toggled(widget)
    if widget.active?
      activate_search_entry("_Location:")
    else
      @glade['search_hbox'].hide
    end
  end

  def on_browser_win_delete(widget, e)
    widget.hide
  end

  def on_close_btn_clicked(widget)
    @glade['browser_win'].hide
  end

  def activate_search_entry(label)
    @glade['search_hbox'].show
    @glade['search_label'].label = label
    @glade['search_entry'].grab_focus
  end

  # SAVE AS DIALOG

  def on_cancel_btn_clicked
    @glade['saveas_dlg'].hide
  end

  def on_save_btn_clicked
    @mpd.save(@glade['name_entry'].text)
    @glade['saveas_dlg'].hide
  end

  # CONNECT DIALOG

  def on_conn_cancel_btn_clicked
    @glade['connect_dlg'].hide
  end

  def on_do_connect_btn_clicked
    @glade['connect_dlg'].hide
    @conf.serv[:host] = @glade['host_entry'].text
    @conf.serv[:port] = @glade['port_entry'].text.to_i
    @conf.serv[:pass] = @glade['pass_entry'].text
    @conf.serv[:pass] = nil if @conf.serv[:pass].empty?
    self.connect
  end

  # CALLBACKS

  def playlist_cb(version)
    rebuild_playlist(version)
    update_playlist
    update_status
  end

  def song_cb(current)
    update_info(current)
    update_playlist
  end

  def state_cb(newstate)
    case newstate
      when "play"
        @glade['play_btn'].stock_id = Gtk::Stock::MEDIA_PAUSE
      when "pause"
        @glade['play_btn'].stock_id = Gtk::Stock::MEDIA_PLAY
      when "stop"
        @glade['play_btn'].stock_id = Gtk::Stock::MEDIA_PLAY
        update_pos(-1)
    end
  end

  def volume_cb(vol)
    @glade['volume_scale'].value = @volume = vol
    self.update_status
  end

  def time_cb(elapsed, total)
    update_pos(elapsed, total)
  end

  def conn_cb(up)
    up ? self.connected : self.disconnected
  end

  # MISC

  def update_playlist
    cur_id = @mpd.status['songid']
    @player_tree_store.each do |model, path, iter|
      iter[5] = iter[4] == cur_id ? Pango::WEIGHT_BOLD : Pango::WEIGHT_NORMAL
    end
  end

  def rebuild_playlist(version)
    @player_tree_store.clear
    if @mpd.connected?
      @mpd.playlist.each do |song|
        iter = @player_tree_store.append(nil)
        iter[0], iter[1], iter[2], iter[3] = Format.all(song, "-")
        iter[4] = song.id
      end
    end
  end

  def update_info(current)
    title, artist, album, time, track = Format.all(current)
    @glade['title_label'].label = Format.title(title)
    @glade['artist_label'].label = Format.artist(artist)
    @glade['album_label'].label = Format.album(album, track)
    @glade['player_win'].title = Format.window(artist, title)
  end

  def update_pos(elapsed, total = 0)
    if @mpd.connected? and @mpd.current_song and total == 0
      total = @mpd.current_song.time.to_i
    end
    if total > 0
      if elapsed >= 0
        @glade['pos_bar'].text = Format.pos(elapsed, total)
        @glade['pos_bar'].fraction = [elapsed.to_f / total, 1].min
      else
        @glade['pos_bar'].text = Format.pos(total)
        @glade['pos_bar'].fraction = 0.0
      end
    else
      if elapsed > 0
        @glade['pos_bar'].text = Format.pos(elapsed)
        @glade['pos_bar'].pulse
      else
        @glade['pos_bar'].text = Format.pos()
        @glade['pos_bar'].fraction = 0.0
      end
    end
  end

  def update_status
    if @mpd.connected?
      ptime = @mpd.playlist.inject(0) {|m, s| m + s.time.to_i }
      plen = @mpd.status['playlistlength'].to_i
      dbtime = @mpd.stats['db_playtime'].to_i
      dblen = @mpd.stats['songs'].to_i
      updated = Time.at(@mpd.stats['db_update'].to_i)
      items = [ "Volume: #{@volume}%",
                "Playlist: #{Format.pos(ptime)} (#{plen} songs)",
                "Library: #{Format.pos(dbtime)} (#{dblen} songs)",
                "Updated: #{updated.strftime('%x %X')}" ]
    else
      items = [ "Disconnected" ]
    end
    @glade['player_status'].remove(@status_ctx, @status_msg) if @status_msg
    @status_msg = @glade['player_status'].push(@status_ctx, items.join(", "))
  end

end

class Format
  class << self
    def all(song, default=nil)
      if song
        dir, base = song.file =~ /^http:/ ? song.file : File.split(song.file)
        [ a(song.title, base, default),
          a(song.artist, song.name, default),
          a(song.album, dir, default),
          song.time ? pos(song.time.to_i) : "∞",
          song.track ]
      end
    end
    def h(s)
      CGI::escapeHTML(a(s, " "))
    end
    def m(t)
      m, s = t.divmod(60); return "%d:%02d" % [m, s] if m < 80
      h, m = m.divmod(60); return "%d:%02d:%02d" % [h, m, s] if h < 24
      d, h = h.divmod(24); return "%dd %dh %dm" % [d, h, m]
    end
    def pos(*times)
      a(times.collect {|t| m(t) }.join(" / "), " ")
    end
    def window(*parts)
      a(parts.compact.join(" - "), Njiiri::NAME)
    end
    def title(title)
      "<big><big><b>#{h(title)}</b></big></big>"
    end
    def artist(artist)
      "<big>#{h(artist)}</big>"
    end
    def album(album, track = nil)
      track = "track #{track}, " if track
      "<small>#{track}<i>#{h(album)}</i></small>"
    end
  end
end

class Conf

  DEFAULTS =
    { :server => { :host => 'localhost', :port => 6600, :pass => nil },
      :geometry =>
        { :player =>
            { :x => 0, :y => 0, :w => 620, :h => 440, :pane => 80 },
          :browser =>
            { :x => 0, :y => 0, :w => 620, :h => 440, :pane => 120 } } }

  attr_accessor :serv, :geom

  def initialize(path)
    @path = path
    @rc = DEFAULTS.merge begin
      File.open(@path) {|f| YAML::load(f) }
    rescue
      {}
    end
    @serv = @rc[:server]
    @geom = @rc[:geometry]
  end

  def save
    begin
      File.open(@path, 'w') {|f| YAML::dump(@rc, f) }
    rescue
    end
  end

end

if __FILE__ == $0
  Gtk.init
  njiiri = Njiiri.new(File.expand_path("~/.njiirirc"))
  njiiri.connect
  Gtk.main
end
