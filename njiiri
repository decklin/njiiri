#!/usr/bin/env ruby

require 'rubygems'
require 'librmpd'
require 'thread'
require 'libglade2'

def clean(s)
  s.gsub!("&", "&amp;")
  s.gsub!("<", "&lt;")
  s.gsub!(">", "&gt;")
  s
end

class Njiiri

  TITLE = "Njiiri MPD Client"
  NAME = "Njiiri"
  VERSION = "0.1"

  TITLE_FORMAT = "<big><big><b>%s</b></big></big>"
  ARTIST_FORMAT = "<big>%s</big>"
  ALBUM_FORMAT = "<small>%s</small>"
  POSITION_FORMAT = "%d:%02d / %d:%02d"

  # This is here to fill in GTK labels so that they don't shrink from a lack
  # of text, which is visually annoying.

  BLANK = ' '

  # CLASS

  def initialize(path, root = nil, domain = nil, localedir = nil,
                 flag = GladeXML::FILE)
    @glade = GladeXML.new(path) { |handler| method(handler) }
  end

  def connect(host, port, pass)
    @glade.get_widget("host_entry").text = host
    @glade.get_widget("port_entry").text = port.to_s
    @glade.get_widget("pass_entry").text = pass

    @mpd = MPD.new host, port
    @mpd.register_callback(self.method('song_cb'), MPD::CURRENT_SONG_CALLBACK)
    @mpd.register_callback(self.method('time_cb'), MPD::TIME_CALLBACK)

    begin
      @mpd.connect true
      @mpd.password pass if pass
      self.enable_toolbuttons(true)
      @glade.get_widget("connect_btn").stock_id = Gtk::Stock::DISCONNECT
      self.connected
    rescue
      self.enable_toolbuttons(false)
    end
  end

  def enable_toolbuttons(sensitive)
    %w{play_btn prev_btn next_btn open_btn saveas_btn clear_btn repeat_btn shuffle_btn}.each do |b|
      @glade.get_widget(b).sensitive = sensitive
    end
  end

  def connected
    if @mpd.playing?
      @glade.get_widget("play_btn").stock_id = Gtk::Stock::MEDIA_PAUSE
    end

    @glade.get_widget("repeat_btn").active = @mpd.repeat?
    @glade.get_widget("shuffle_btn").active = @mpd.random?

    @old_volume = @mpd.volume
    @glade.get_widget("volume_scale").value = @mpd.volume.to_f
  end

  # MAIN WINDOW

  def on_quit(widget, event)
    @mpd.disconnect
    Gtk.main_quit
  end

  # TOOLBAR

  def on_play_btn_clicked(widget)
    if @mpd.playing?
      @mpd.pause = true
      widget.stock_id = Gtk::Stock::MEDIA_PLAY
    else
      @mpd.pause = false
      widget.stock_id = Gtk::Stock::MEDIA_PAUSE
    end
  end

  def on_prev_btn_clicked
    @mpd.previous
  end

  def on_next_btn_clicked
    @mpd.next
  end

  def on_open_btn_clicked
    @glade.get_widget("browser_win").show
  end

  def on_saveas_btn_clicked
    @glade.get_widget("saveas_dlg").show
  end

  def on_clear_btn_clicked
    @mpd.clear
  end

  def on_repeat_btn_toggled(widget)
    @mpd.repeat = widget.active?
  end

  def on_shuffle_btn_toggled(widget)
    @mpd.random = widget.active?
  end

  def on_connect_btn_clicked(widget)
    if @mpd.connected?
      self.enable_toolbuttons(false)
      widget.stock_id = Gtk::Stock::CONNECT
      @mpd.disconnect
    else
      @glade.get_widget("connect_dlg").show
    end
  end

  def on_volume_scale_value_changed(widget)
    if widget.value.to_i != @old_volume
      @old_volume = @mpd.volume = widget.value.to_i
    end
  end

  # BROWSER WINDOW

  def on_close_btn_clicked(widget)
    @glade.get_widget("browser_win").hide
  end

  # SAVE AS DIALOG

  def on_cancel_btn_clicked
    @glade.get_widget("saveas_dlg").hide
  end

  def on_save_btn_clicked
    @mpd.save(@glade.get_widget("name_entry").text)
    @glade.get_widget("saveas_dlg").hide
  end

  # CONNECT DIALOG

  def on_conn_cancel_btn_clicked
    @glade.get_widget("connect_dlg").hide
  end

  def on_do_connect_btn_clicked
    @glade.get_widget("connect_dlg").hide
    host = @glade.get_widget("host_entry").text
    port = @glade.get_widget("port_entry").text.to_i
    pass = @glade.get_widget("pass_entry").text
    self.connect(host, port, pass)
  end

  # CALLBACKS

  def song_cb(current)
    title_label = @glade.get_widget("title_label")
    artist_label = @glade.get_widget("artist_label")
    album_label = @glade.get_widget("album_label")
    if current.nil?
      title_label.label = TITLE_FORMAT % BLANK
      artist_label.label = ARTIST_FORMAT % BLANK
      album_label.label = ALBUM_FORMAT % BLANK
    else
      title_label.label = TITLE_FORMAT % clean(current.title)
      artist_label.label = ARTIST_FORMAT % clean(current.artist)
      album_label.label = ALBUM_FORMAT % clean(current.album)

      #elapsed, total = @mpd.status["time"].split(":")
      #self.time_cb(elapsed, total)
    end
  end

  def time_cb(elapsed, total)
    pos_bar = @glade.get_widget("pos_bar")
    if total > 0:
      pos_bar.fraction = elapsed.to_f / total
      pos_bar.text = POSITION_FORMAT % \
        [elapsed / 60, elapsed % 60, total / 60, total % 60]
    else
      pos_bar.fraction = 0.0
      pos_bar.text = BLANK
    end
  end

end

config = {
  'host' => 'localhost',
  'password' => nil,
  'port' => 6600
  }

File.open(File.expand_path("~/.njiirirc")) do |y|
  YAML.load_documents(y) do |doc|
    config = doc
  end
end

Gtk.init

njiiri = Njiiri.new(File.dirname($0)+"/njiiri.glade", nil, Njiiri::NAME)
njiiri.connect config['host'], config['port'], config['password']

Gtk.main
