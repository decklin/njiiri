#!/usr/bin/ruby

require 'rubygems'
require 'librmpd'
require 'thread'
require 'libglade2'
require 'cgi'
require 'yaml'

class MPD
  def lsinfo(path = '/', type = :files)
    response = send_command "lsinfo \"#{path}\""
    case type
      when :files
        filter_response response, /\Afile: /i
      when :directories
        filter_response response, /\Adirectory: /i
      when :playlists
        filter_response response, /\Aplaylist: /i
    end
  end
  def listallinfo(path=nil)
    songs(path)
  end
  def playlist_len
    status['playlistlength'].to_i  
  end
  def pos
    status['song'].to_i  
  end
  class Song
    def id; self['id']; end
  end
end

class GladeWrapper < GladeXML
  DIRS = %w[. /usr/local/share/njiiri /usr/share/njiiri]
  FILE = 'njiiri.glade'

  def initialize(obj)
    DIRS.each do |dir|
      path = "#{dir}/#{FILE}"
      if File.exist?(path)
        return super(path) {|handler| obj.method(handler) }
      end
    end
  end

  def method_missing(name)
    self[name.to_s]
  end
end


class Njiiri
  NAME = 'Njiiri'

  PLAYER_COLS = [ [ 0, '', 40, Symbol ],
                  [ 1, 'Title', 180, String ],
                  [ 2, 'Artist', 160, String ],
                  [ 3, 'Album', 140, String ],
                  [ 4, 'Time', 40, String ],
                  [ 5, :id, nil, String ],
                  [ 6, :weight, nil, Integer ] ]
  BROWSE_COLS = [ [ 0, '', 40, Symbol ],
                  [ 1, 'Title', 140, String ],
                  [ 2, 'Artist', 120, String ],
                  [ 3, 'Album', 100, String ],
                  [ 4, 'Time', 40, String ],
                  [ 5, :path, nil, String ],
                  [ 6, :cb, nil, Proc ] ]
  BOOKMK_COLS = [ [ 0, 'Places', 0, String ],
                  [ 1, :cb, nil, Proc ] ]

  # CLASS

  @@callbacks = {}

  def initialize(rc_path)
    @config = Conf.new(rc_path)
    @widgets = GladeWrapper.new(self)

    @status_ctx = @widgets.player_status.get_context_id(NAME)
    @status_msg = nil
    @prev_version = 0
    @btab = {}
    @tasks = {}
    @mutex = Mutex.new

    @rend = Gtk::CellRendererText.new
    @rend.ellipsize = Pango::ELLIPSIZE_END
    @rend_icon = Gtk::CellRendererPixbuf.new

    @player_tree_store = Gtk::TreeStore.new(*PLAYER_COLS.collect{|x| x[3] })
    @widgets.playlist_tree.model = @player_tree_store
    @widgets.playlist_tree.selection.mode = Gtk::SELECTION_MULTIPLE

    PLAYER_COLS.each do |i, name, width, type|
      make_column(name, width, type, i, :weight => 6) do |col|
        col.sizing = Gtk::TreeViewColumn::FIXED
        col.fixed_width = width
        col.resizable = true
        @widgets.playlist_tree.append_column(col)
      end
    end

    # replace with a new, non-weighted one (this is a dirty hack)
    @rend = Gtk::CellRendererText.new
    @rend.ellipsize = Pango::ELLIPSIZE_END

    @files_tree_store = Gtk::TreeStore.new(*BROWSE_COLS.collect{|x| x[3] })
    @widgets.files_tree.model = @files_tree_store
    @widgets.files_tree.selection.mode = Gtk::SELECTION_MULTIPLE

    BROWSE_COLS.each do |i, name, width, type|
      make_column(name, width, type, i) do |col|
        col.sizing = Gtk::TreeViewColumn::FIXED
        col.fixed_width = width
        col.resizable = true
        @widgets.files_tree.append_column(col)
      end
    end

    @bookmarks_tree_store = Gtk::TreeStore.new(*BOOKMK_COLS.collect{|x| x[3] })
    @widgets.bookmarks_tree.model = @bookmarks_tree_store

    BOOKMK_COLS.each do |i, name, width, type|
      make_column(name, width, type, i) do |col|
        col.resizable = false
        @widgets.bookmarks_tree.append_column(col)
      end
    end

    @host = @config.servers.first[:host]
    @port = @config.servers.first[:port].to_s
    @password = @config.servers.first[:password].to_s
    @widgets.host_entry.text = @host
    @widgets.port_entry.text = @port
    @widgets.password_entry.text = @password

    x, y, h, w = [:x, :y, :h, :w].collect {|d| @config.player[d] }
    @widgets.player_win.set_default_size(w, h)
    @widgets.player_win.move(x, y)
    @widgets.main_pane.set_position(@config.player[:pane])

    x, y, h, w = [:x, :y, :h, :w].collect {|d| @config.browser[d] }
    @widgets.browser_win.set_default_size(w, h)
    @widgets.browser_win.move(x, y)
    @widgets.files_pane.set_position(@config.browser[:pane])

    @widgets.player_win.show
  end

  def make_column(name, width, type, i, params={})
    if width
      if type == String
        yield Gtk::TreeViewColumn.new(name, @rend, params.merge(:text => i))
      elsif type == Symbol
        yield Gtk::TreeViewColumn.new(name, @rend_icon, :stock_id => i)
      end
    end
  end

  def connect
    @mpd = MPD.new(@host, @port)
    @@callbacks.each {|tag, name| @mpd.register_callback(method(name), tag) }
    begin
      @ack = @mpd.connect(true)
      @mpd.password(@password) unless @password.empty?
    rescue => e
      STDERR.puts "Error connecting: #{e}"
      disconnected
    end
  end

  def connected
    enable_toolbuttons(true)
    @widgets.random_item.active = @mpd.random?
    @widgets.volume_scale.value = @mpd.volume
    refresh_state(@mpd.status['state'])
    refresh_info(@mpd.current_song)
    rebuild_playlist(@mpd.playlist_version, 0)
    refresh_playlist
    refresh_statusbar
    reset_pwd
  end

  def disconnected
    @ack = "no MPD"
    enable_toolbuttons(false)
    @player_tree_store.clear
    @files_tree_store.clear
    refresh_info(nil)
    refresh_pos(-1)
    refresh_statusbar
  end

  def enable_toolbuttons(sensitive)
    %w[play pause prev next shuffle open saveas clear].each do |b|
      @widgets["#{b}_btn"].sensitive = sensitive
    end
  end

  # MAIN WINDOW

  def on_player_win_delete(widget, e)
    @mpd.disconnect
    @config.save
    Gtk.main_quit
  end

  def on_info_box_size_allocate(widget, a)
    if @widgets.cover_img.width_request == a.height
      @widgets.cover_img.height_request = 1
    else
      @widgets.cover_img.width_request = a.height
      @widgets.cover_img.height_request = a.height
    end
  end

  def on_player_win_size_allocate(widget, a)
    @config.player[:w] = a.width
    @config.player[:h] = a.height
    false
  end

  def on_player_win_configure_event(widget, e)
    @config.player[:x] = e.x
    @config.player[:y] = e.y
    false
  end

  def on_browser_win_size_allocate(widget, a)
    @config.browser[:w] = a.width
    @config.browser[:h] = a.height
    false
  end

  def on_browser_win_configure_event(widget, e)
    @config.browser[:x] = e.x
    @config.browser[:y] = e.y
    false
  end

  def on_pos_bar_button_press_event(widget, e)
    if @mpd.connected? and @mpd.playing?
      seek_to = (e.x / widget.allocation.width) * @mpd.current_song.time.to_i
      @mpd.seek(@mpd.current_song.pos, seek_to.to_i)
      refresh_pos(seek_to.to_i)
      schedule(:got_time) {}
    end
  end

  def on_playlist_tree_row_activated(widget, path, col)
    iter = @player_tree_store.get_iter(path)
    @mpd.seekid(iter[5], 0)
  end

  def on_playlist_tree_key_press_event(widget, e)
    if e.keyval == Gdk::Keyval::GDK_Delete
      @widgets.playlist_tree.selection.selected_each do |model, path, iter|
        @widgets.playlist_tree.selection.unselect_iter(iter)
        @mpd.deleteid(iter[5])
      end
    end
  end

  # TOOLBAR

  def on_play_btn_clicked(widget)
    @mpd.play
  end

  def on_pause_btn_clicked(widget)
    @mpd.pause = true
  end

  def on_stop_item_activate(widget)
    @mpd.stop
  end

  def on_prev_btn_clicked
    @mpd.previous
  end

  def on_next_btn_clicked
    @mpd.next
  end

  def on_open_btn_clicked
    @widgets.browser_win.show
  end

  def on_saveas_btn_clicked
    @widgets.saveas_dlg.show
  end

  def on_clear_btn_clicked
    @mpd.clear
  end

  def on_shuffle_btn_clicked(widget)
    @mpd.shuffle
  end

  def on_shuffle_item_activate(widget)
    @mpd.shuffle
  end

  def on_random_item_toggled(widget)
    @mpd.random = widget.active?
  end

  def on_connect_btn_clicked(widget)
    @widgets.connect_dlg.show
  end

  def on_disconnect_btn_activate(widget)
    @mpd.disconnect
    disconnected
  end

  def on_volume_scale_value_changed(widget)
    schedule(:got_volume) { @mpd.volume = widget.value.to_i }
  end

  # BROWSER WINDOW

  def on_browser_win_show
    bookmarks = [ [ 'Library', proc { reset_pwd } ],
                  [ 'Search', proc { activate_search_entry('_Search:') } ],
                  [ '-', proc { } ] ] +
                @mpd.playlists.collect { |pl| [ pl, proc { @mpd.load(pl) } ] }
    @bookmarks_tree_store.clear
    bookmarks.each do |n, p|
      iter = @bookmarks_tree_store.append(nil)
      iter[0] = n
      iter[1] = p
    end
  end

  def add_pwd(dir)
    @pwd << dir

    @widgets.breadcrumb_box.children[1..-1].each_with_index do |child, i|
      if child.label != @pwd[i] or i >= @pwd.length-1
        @widgets.breadcrumb_box.remove(child)
        @btab.delete(child)
      end
    end

    btn = Gtk::Button.new(dir, false)
    @btab[btn] = @pwd.join('/')
    btn.signal_connect('clicked') {|w| up_pwd(@btab[w].split('/')) }
    @widgets.breadcrumb_box.add(btn)
    btn.show

    load_pwd
  end

  def load_pwd
    @files_tree_store.clear
    pwd = @pwd.join('/')
    @mpd.lsinfo(pwd, :directories).each do |path|
      dir = File.basename(path)
      iter = @files_tree_store.append(nil)
      iter[0] = Gtk::Stock::DIRECTORY
      iter[1], iter[2], iter[3], iter[4] = dir, '-', '-', '-'
      iter[5] = path
      iter[6] = proc { add_pwd(dir) }
    end
    @mpd.lsinfo(pwd, :files).each do |path|
      song = @mpd.listallinfo(path)[0]
      iter = @files_tree_store.append(nil)
      iter[0] = Gtk::Stock::FILE
      iter[1], iter[2], iter[3], iter[4] = Format.all(song, '-')
      iter[5] = path
      iter[6] = proc { @mpd.add path }
    end
  end

  def reset_pwd
    @pwd = [];
    load_pwd
  end

  def up_pwd(wd)
    @pwd = wd;
    load_pwd
  end

  def on_bookmarks_tree_row_activated(widget, path, col)
    iter = @bookmarks_tree_store.get_iter(path)
    iter[1].call
  end

  def on_files_tree_row_activated(widget, path, col)
    iter = @files_tree_store.get_iter(path)
    iter[6].call
  end

  def on_browser_win_key_press_event(widget, e)
    if !@widgets.search_entry.has_focus? and e.keyval == '/'[0]
      @widgets.loc_btn.active = true
      @widgets.search_entry.text = 'http://'
      @widgets.search_entry.grab_focus
      @widgets.search_entry.position = -1
      true
    else
      false
    end
  end

  def add_songs_from(tree)
    add_by_id = proc do |model, path, iter|
      @mpd.add(iter[5])
    end
    if tree.selection.selected_rows.empty?
      tree.model.each &add_by_id
    else
      tree.selection.selected_each &add_by_id
    end
  end

  def on_add_btn_clicked(widget)
    if @widgets.search_entry.has_focus?
      begin
        @mpd.add(@widgets.search_entry.text)
        @widgets.search_entry.text = ''
      rescue RuntimeError
      end
    else
      add_songs_from(@widgets.files_tree)
    end
  end

  def insert_songs_from(tree)
    orig_pos = @mpd.status['state'] == 'stop' ? -1 : @mpd.pos
    orig_len = @mpd.playlist_len
    add_songs_from(tree)
    if orig_len != 0
      pos = orig_pos
      src = orig_len - 1
      len = @mpd.playlist_len
      @mpd.move(src += 1, pos += 1) while src < len - 1
    end
    orig_pos + 1
  end

  def on_insert_btn_clicked(widget)
    insert_songs_from(@widgets.files_tree)
  end

  def on_jump_btn_clicked(widget)
    pos = insert_songs_from(@widgets.files_tree)
    @mpd.play(pos)
  end

  def on_loc_btn_toggled(widget)
    if widget.active?
      activate_search_entry('_Location:')
    else
      @widgets.search_hbox.hide
    end
  end

  def on_root_btn_clicked(widget)
    reset_pwd
  end

  def on_update_btn_clicked(widget)
    @mpd.update
  end

  def on_browser_win_delete(widget, e)
    widget.hide
  end

  def on_close_btn_clicked(widget)
    @widgets.browser_win.hide
  end

  def activate_search_entry(label)
    @widgets.search_hbox.show
    @widgets.search_label.label = label
    @widgets.search_entry.grab_focus
  end

  # SAVE AS DIALOG

  def on_cancel_btn_clicked
    @widgets.saveas_dlg.hide
  end

  def on_save_btn_clicked
    @mpd.save(@widgets.name_entry.text)
    @widgets.saveas_dlg.hide
  end

  # CONNECT DIALOG

  def on_conn_cancel_btn_clicked
    @widgets.connect_dlg.hide
  end

  def on_do_connect_btn_clicked
    @widgets.connect_dlg.hide
    @host = @widgets.host_entry.text
    @port = @widgets.port_entry.text.to_i
    @password = @widgets.password_entry.text
    @config << { :host => @host, :port => @port, :password => @password }
    begin
      @mpd.disconnect if @mpd.connected?
      connect
    rescue
    end
  end

  # CALLBACKS

  def schedule(slot, &block)
    @mutex.synchronize { @tasks[slot] = block }
  end

  def pending
    @mutex.synchronize do
      blocks = @tasks.values
      @tasks.clear
      return blocks
    end
  end

  def wake
    pending.each {|block| block.call }
  end

  def self.def_cb(name, tag, &block)
    @@callbacks[tag] = "_cb_#{tag}"
    class_eval do
      define_method name, &block
      define_method @@callbacks[tag] do |*args|
        schedule(name) { self.send(name, *args) }
      end
    end
  end

  def_cb :got_playlist, MPD::PLAYLIST_CALLBACK do |version|
    rebuild_playlist(version)
    refresh_playlist
    refresh_statusbar
  end

  def_cb :got_song, MPD::CURRENT_SONG_CALLBACK do |current|
    refresh_info(current)
    refresh_playlist
    refresh_pos(-1)
  end

  def_cb :got_state, MPD::STATE_CALLBACK do |state|
    refresh_state(state)
  end

  def_cb :got_volume, MPD::VOLUME_CALLBACK do |vol|
    @widgets.volume_scale.value = vol
    schedule(:got_volume) {}
  end

  def_cb :got_time, MPD::TIME_CALLBACK do |elapsed, total|
    refresh_pos(elapsed, total)
  end

  def_cb :got_connection, MPD::CONNECTION_CALLBACK do |up|
    up ? connected : disconnected
  end

  # MISC

  def refresh_state(state)
    case state
      when 'play'
        @widgets.play_btn.visible = false
        @widgets.pause_btn.visible = true
      when 'pause', 'stop'
        @widgets.play_btn.visible = true
        @widgets.pause_btn.visible = false
        refresh_pos(-1)
    end
  end

  def refresh_playlist
    if @mpd.connected?
      cur_songid = @mpd.status['songid']
      @player_tree_store.each do |model, path, iter|
        if iter[5] == cur_songid
          iter[0] = Gtk::Stock::MEDIA_PLAY
          iter[6] = Pango::WEIGHT_BOLD
        else
          iter[0] = nil
          iter[6] = Pango::WEIGHT_NORMAL
        end
      end
    end
  end

  def rebuild_playlist(version, prev=@prev_version)
    if @mpd.connected?
      @mpd.playlist_changes(prev).each do |song|
        iter = @player_tree_store.get_iter(song['pos']) \
            || @player_tree_store.append(nil)
        iter[1], iter[2], iter[3], iter[4] = Format.all(song, '-')
        iter[5] = song.id
      end
      if last = @player_tree_store.get_iter(@mpd.playlist_len.to_s)
        1 while @player_tree_store.remove(last)
      end
      @prev_version = version
    end
  end

  def refresh_info(current)
    if current
      title, artist, album, time, track = Format.all(current)
    else
      title = NAME
      album = @ack.strip
    end
    @widgets.title_label.label = Format.title(title)
    @widgets.artist_label.label = Format.artist(artist)
    @widgets.album_label.label = Format.album(album, track)
    @widgets.player_win.title = Format.window(artist, title)
  end

  def refresh_pos(elapsed, total = 0)
    if @mpd.connected? and @mpd.current_song and total == 0
      total = @mpd.current_song.time.to_i
    end
    if total > 0
      if elapsed >= 0
        @widgets.pos_bar.text = Format.pos(elapsed, total)
        @widgets.pos_bar.fraction = [elapsed.to_f / total, 1].min
      else
        @widgets.pos_bar.text = Format.pos(total)
        @widgets.pos_bar.fraction = 0.0
      end
    else
      if elapsed > 0
        @widgets.pos_bar.text = Format.pos(elapsed)
        @widgets.pos_bar.pulse
      else
        @widgets.pos_bar.text = Format.pos()
        @widgets.pos_bar.fraction = 0.0
      end
    end
  end

  def refresh_statusbar
    if @mpd.connected?
      pl_time = @mpd.playlist.inject(0) {|m, s| m + s.time.to_i }
      pl_len = @mpd.playlist_len
      db_time = @mpd.stats['db_playtime'].to_i
      db_len = @mpd.stats['songs'].to_i
      db_update = Time.at(@mpd.stats['db_update'].to_i)
      text = "connected (#{@host}:#{@port}) - " +
             "playlist #{Format.pos(pl_time)} (#{pl_len} songs) - " +
             "library #{Format.pos(db_time)} (#{db_len} songs) - " +
             "updated #{db_update.strftime('%x %X')}"
    else
      text = "disconnected (#{@host}:#{@port})"
    end
    @widgets.player_status.remove(@status_ctx, @status_msg) if @status_msg
    @status_msg = @widgets.player_status.push(@status_ctx, text)
  end
end

class Format
  class << self
    def all(song, default=nil)
      dir, file = File.split(song.file)
      [ a(song.title, file, default),
        a(song.artist, song.name, default),
        a(song.album, dir, default),
        song.time ? pos(song.time.to_i) : '∞',
        song.track ]
    end
    def a(*l)
      l.find {|x| not (x.nil? or x.empty?) }
    end
    def h(s)
      CGI::escapeHTML(a(s, ' '))
    end
    def m(t)
      m, s = t.divmod(60); return '%d:%02d' % [m, s] if m < 80
      h, m = m.divmod(60); return '%d:%02d:%02d' % [h, m, s] if h < 24
      d, h = h.divmod(24); return '%dd %dh %dm' % [d, h, m]
    end
    def pos(*times)
      a(times.collect {|t| m(t) }.join(' / '), ' ')
    end
    def window(*parts)
      a(parts.compact.join(' - '), Njiiri::NAME)
    end
    def title(title)
      "<big><b>#{h(title)}</b></big>"
    end
    def artist(artist)
      "<big>#{h(artist)}</big>"
    end
    def album(album, track = nil)
      track = "track #{h(track)}, " if track
      "#{track}<i>#{h(album)}</i>"
    end
  end
end

class Conf
  DEFAULTS = {
    :servers => [ { :host => 'localhost', :port => 6600, :password => '' } ],
    :geometry => {
      :player => { :x => 0, :y => 0, :w => 600, :h => 400, :pane => 80 },
      :browser => { :x => 0, :y => 0, :w => 600, :h => 400, :pane => 100 }
    }
  }

  def initialize(path)
    @path = path
    @rc = DEFAULTS.merge begin
      File.open(path) {|f| YAML::load(f) }
    rescue
      {}
    end
  end

  def save
    begin
      File.open(@path, 'w') {|f| YAML::dump(@rc, f) }
    rescue => e
      STDERR.puts "Error saving config: #{e}"
    end
  end

  def player; @rc[:geometry][:player]; end
  def browser; @rc[:geometry][:browser]; end
  def servers; @rc[:servers]; end
  def <<(server)
    @rc[:servers].reject! {|srv| srv[:host] == server[:host] }
    @rc[:servers] << server
  end
end

if __FILE__ == $0
  Gtk.init
  njiiri = Njiiri.new(File.expand_path('~/.njiirirc'))
  njiiri.connect 
  Gtk.timeout_add(100) { njiiri.wake }
  Gtk.main
end
