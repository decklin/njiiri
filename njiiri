#!/usr/bin/ruby

require 'rubygems'
require 'librmpd'
require 'thread'
require 'libglade2'
require 'cgi'

class NjConfig

  DEFAULTS =
    { :server => { :host => 'localhost', :port => 6600, :pass => nil },
      :geometry =>
        { :player =>
            { :x => 0, :y => 0, :w => 620, :h => 440, :cover => 100 },
          :browser =>
            { :x => 0, :y => 0, :w => 620, :h => 440, :cover => 100 } } }

  attr_accessor :serv, :geom

  def initialize(path)
    @path = path
    @rc = DEFAULTS.merge begin
      File.open(@path) { |f| YAML::load(f) }
    rescue
      {}
    end
    @serv = @rc[:server]
    @geom = @rc[:geometry]
  end

  def save
    begin
      File.open(@path, 'w') { |f| YAML::dump(@rc, f) }
    rescue
    end
  end

end

def fmt_pos(*times)
  times.collect { |t| "%d:%02d" % [t/60, t%60] }.join(" / ")
end

def fmt_wintitle(*parts)
  parts.join(" - ")
end

class Njiiri

  TITLE = "Njiiri MPD Client"
  NAME = "Njiiri"
  VERSION = "0.1"
  GLADE_PATH = "njiiri.glade"

  TITLE_FMT = "<big><big><b>%s</b></big></big>"
  ARTIST_FMT = "<big>%s</big>"
  ALBUM_FMT = "<small>%s</small>"
  BLANK = " "

  # CLASS

  def initialize(rc_path)
    @conf = NjConfig.new(rc_path)
    @glade = GladeXML.new(GLADE_PATH) { |handler| method(handler) }
    @glade['host_entry'].text = @conf.serv[:host]
    @glade['port_entry'].text = @conf.serv[:port].to_s
    @glade['pass_entry'].text = @conf.serv[:pass].to_s
  end

  def connect
    @mpd = MPD.new @conf.serv[:host], @conf.serv[:port]
    @mpd.register_callback(self.method('song_cb'), MPD::CURRENT_SONG_CALLBACK)
    @mpd.register_callback(self.method('state_cb'), MPD::STATE_CALLBACK)
    @mpd.register_callback(self.method('time_cb'), MPD::TIME_CALLBACK)

    begin
      @mpd.connect true
      @mpd.password @conf.serv[:pass] if @conf.serv[:pass]
      self.enable_toolbuttons(true)
      @glade['connect_btn'].stock_id = Gtk::Stock::DISCONNECT
      self.connected
    rescue
      self.enable_toolbuttons(false)
    end
  end

  def enable_toolbuttons(sensitive)
    %w{play prev next open saveas clear repeat shuffle}.each do |b|
      @glade[b+'_btn'].sensitive = sensitive
    end
  end

  def connected
    if @mpd.playing?
      @glade['play_btn'].stock_id = Gtk::Stock::MEDIA_PAUSE
    end

    @glade['repeat_btn'].active = @mpd.repeat?
    @glade['shuffle_btn'].active = @mpd.random?

    @old_volume = @mpd.volume
    @glade['volume_scale'].value = @mpd.volume.to_f

    @status_msg = nil
    @status_ctx = @glade['player_status'].get_context_id(TITLE)
    self.update_status
  end

  # MAIN WINDOW

  def on_quit(widget, event)
    @mpd.disconnect
    @conf.save
    Gtk.main_quit
  end

  def on_info_box_size_allocate(widget, a)
    if @glade['cover_img'].width_request == a.height
      @glade['cover_img'].height_request = 1
    else
      @glade['cover_img'].width_request = a.height
      @glade['cover_img'].height_request = a.height
    end
  end

  # TOOLBAR

  def on_play_btn_clicked(widget)
    if @mpd.stopped?
      @mpd.play
      widget.stock_id = Gtk::Stock::MEDIA_PAUSE
    elsif @mpd.paused?
      @mpd.pause = false
      widget.stock_id = Gtk::Stock::MEDIA_PAUSE
    else
      @mpd.pause = true
      widget.stock_id = Gtk::Stock::MEDIA_PLAY
    end
  end

  def on_prev_btn_clicked
    @mpd.previous
  end

  def on_next_btn_clicked
    @mpd.next
  end

  def on_open_btn_clicked
    @glade['browser_win'].show
  end

  def on_saveas_btn_clicked
    @glade['saveas_dlg'].show
  end

  def on_clear_btn_clicked
    @mpd.clear
  end

  def on_repeat_btn_toggled(widget)
    @mpd.repeat = widget.active?
  end

  def on_shuffle_btn_toggled(widget)
    @mpd.random = widget.active?
  end

  def on_connect_btn_clicked(widget)
    if @mpd.connected?
      self.enable_toolbuttons(false)
      widget.stock_id = Gtk::Stock::CONNECT
      @mpd.disconnect
      self.update_info(nil)
      self.update_pos(0, 0)
      self.update_status
    else
      @glade['connect_dlg'].show
    end
  end

  def on_volume_scale_value_changed(widget)
    if widget.value.to_i != @old_volume
      @old_volume = @mpd.volume = widget.value.to_i
      self.update_status
    end
  end

  # BROWSER WINDOW

  def on_close_btn_clicked(widget)
    @glade['browser_win'].hide
  end

  # SAVE AS DIALOG

  def on_cancel_btn_clicked
    @glade['saveas_dlg'].hide
  end

  def on_save_btn_clicked
    @mpd.save(@glade['name_entry'].text)
    @glade['saveas_dlg'].hide
  end

  # CONNECT DIALOG

  def on_conn_cancel_btn_clicked
    @glade['connect_dlg'].hide
  end

  def on_do_connect_btn_clicked
    @glade['connect_dlg'].hide
    @conf.serv[:host] = @glade['host_entry'].text
    @conf.serv[:port] = @glade['port_entry'].text.to_i
    @conf.serv[:pass] = @glade['pass_entry'].text
    @conf.serv[:pass] = nil if @conf.serv[:pass].empty?
    self.connect
  end

  # CALLBACKS

  def song_cb(current)
    update_info(current)
  end

  def state_cb(newstate)
    case newstate
      when "play"
        @glade['play_btn'].stock_id = Gtk::Stock::MEDIA_PAUSE
      when "pause"
        @glade['play_btn'].stock_id = Gtk::Stock::MEDIA_PLAY
      when "stop"
        @glade['play_btn'].stock_id = Gtk::Stock::MEDIA_PLAY
        update_pos(0, 0)
    end
  end

  def time_cb(elapsed, total)
    update_pos(elapsed, total)
  end

  # MISC

  def update_pos(elapsed, total)
    pos_bar = @glade['pos_bar']
    if total > 0:
      pos_bar.fraction = elapsed.to_f / total
      pos_bar.text = fmt_pos(elapsed, total)
    else
      pos_bar.fraction = 0.0
      pos_bar.text = BLANK
    end
  end

  def update_info(current)
    if @mpd.connected? and current
      @glade['player_win'].title = fmt_wintitle(current.artist, current.title)
      @glade['title_label'].label = TITLE_FMT % CGI::escapeHTML(current.title)
      @glade['artist_label'].label = ARTIST_FMT % CGI::escapeHTML(current.artist)
      @glade['album_label'].label = ALBUM_FMT % CGI::escapeHTML(current.album)
      if @mpd.playing?
        elapsed, total = @mpd.status["time"].split(":").collect {|t| t.to_i }
        self.update_pos(elapsed, total)
      else
        self.update_pos(0, 0)
      end
    else
      @glade['player_win'].title = NAME
      @glade['title_label'].label = TITLE_FMT % BLANK
      @glade['artist_label'].label = ARTIST_FMT % BLANK
      @glade['album_label'].label = ALBUM_FMT % BLANK
    end
  end

  def update_status
    if @mpd.connected?
        if @status_msg
          @glade['player_status'].remove(@status_ctx, @status_msg)
        end
        text = "Volume: #{@mpd.volume}%"
        @status_msg = @glade['player_status'].push(@status_ctx, text)
    else
      @status_msg = @glade['player_status'].push(@status_ctx, "Disconnected")
    end
  end

end

Gtk.init
njiiri = Njiiri.new(File.expand_path("~/.njiirirc"))
njiiri.connect
Gtk.main
